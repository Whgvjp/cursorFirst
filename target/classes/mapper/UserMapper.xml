<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.library.management.mapper.UserMapper">
    
    <!-- 结果映射 -->
    <resultMap id="BaseResultMap" type="com.library.management.entity.User">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="username" property="username" jdbcType="VARCHAR"/>
        <result column="password" property="password" jdbcType="VARCHAR"/>
        <result column="real_name" property="realName" jdbcType="VARCHAR"/>
        <result column="email" property="email" jdbcType="VARCHAR"/>
        <result column="phone" property="phone" jdbcType="VARCHAR"/>
        <result column="user_type" property="userType" jdbcType="INTEGER"/>
        <result column="status" property="status" jdbcType="INTEGER"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP"/>
    </resultMap>
    
    <!-- 基础字段 -->
    <sql id="Base_Column_List">
        id, username, password, real_name, email, phone, user_type, status, create_time, update_time
    </sql>
    
    <!-- 新增用户 -->
    <insert id="insert" parameterType="com.library.management.entity.User" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO user (username, password, real_name, email, phone, user_type, status, create_time, update_time)
        VALUES (#{username}, #{password}, #{realName}, #{email}, #{phone}, #{userType}, #{status}, NOW(), NOW())
    </insert>
    
    <!-- 根据ID更新用户 -->
    <update id="updateById" parameterType="com.library.management.entity.User">
        UPDATE user 
        SET username = #{username}, real_name = #{realName}, email = #{email}, 
            phone = #{phone}, user_type = #{userType}, update_time = NOW()
        WHERE id = #{id}
    </update>
    
    <!-- 根据ID删除用户 -->
    <delete id="deleteById" parameterType="java.lang.Long">
        DELETE FROM user WHERE id = #{id}
    </delete>
    
    <!-- 根据ID查询用户 -->
    <select id="selectById" parameterType="java.lang.Long" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM user 
        WHERE id = #{id}
    </select>
    
    <!-- 根据用户名查询用户 -->
    <select id="selectByUsername" parameterType="java.lang.String" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM user 
        WHERE username = #{username}
    </select>
    
    <!-- 查询所有用户 -->
    <select id="selectAll" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM user 
        ORDER BY create_time DESC
    </select>
    
    <!-- 分页查询用户 -->
    <select id="selectByPage" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM user 
        ORDER BY create_time DESC
        LIMIT #{offset}, #{limit}
    </select>
    
    <!-- 根据条件查询用户 -->
    <select id="selectByCondition" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List"/>
        FROM user 
        <where>
            <if test="username != null and username != ''">
                AND username LIKE CONCAT('%', #{username}, '%')
            </if>
            <if test="realName != null and realName != ''">
                AND real_name LIKE CONCAT('%', #{realName}, '%')
            </if>
            <if test="userType != null">
                AND user_type = #{userType}
            </if>
        </where>
        ORDER BY create_time DESC
    </select>
    
    <!-- 查询用户总数 -->
    <select id="selectCount" resultType="java.lang.Integer">
        SELECT COUNT(*) FROM user
    </select>
    
    <!-- 更新用户状态 -->
    <update id="updateStatus">
        UPDATE user 
        SET status = #{status}, update_time = NOW()
        WHERE id = #{id}
    </update>
    
</mapper>
